{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "AWS CloudFormation template to set up basic auth for CloudFront distribution",

  "Parameters": {
    "AuthUsername": {
      "Description": "Username to be used for basic authentication",
      "Type": "String"
    },
    "AuthPassword": {
      "Description": "Password to be used for basic authentication",
      "Type": "String"
    }
  },

  "Resources": {
    "AuthLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Sub": "${AWS::StackName}-auth-lambda" },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com", "edgelambda.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*",
                  "Action": "logs:*"
                }
              ]
            }
          }
        ]
      }
    },

    "AuthLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-auth-lambda"
        },
        "Description": "Lambda function to provide basic auth for a CloudFront distribution",
        "Code": {
          "ZipFile": {
            "Fn::Sub": "'use strict'; exports.handler = (event, context, callback) => { const request = event.Records[0].cf.request; const headers = request.headers; const authUser = '${AuthUsername}'; const authPass = '${AuthPassword}'; const authString = 'Basic ' + new Buffer(authUser + ':' + authPass).toString('base64'); if (typeof headers.authorization == 'undefined' || headers.authorization[0].value != authString) { const body = 'Unauthorized'; const response = { status: '401', statusDescription: 'Unauthorized', body: body, headers: { 'www-authenticate': [{key: 'WWW-Authenticate', value:'Basic'}] } }; callback(null, response); } callback(null, request); };"
          }
        },
        "MemorySize": 128,
        "Timeout": 5,
        "Runtime": "nodejs16.x",
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": ["AuthLambdaRole", "Arn"] }
      }
    },

    "VersionedAuthLambda": {
      "Type": "AWS::Lambda::Version",
      "Properties": {
        "FunctionName": { "Ref": "AuthLambda" }
      }
    },

    "AuthLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": ["/", ["/aws/lambda", { "Ref": "AuthLambda" }]]
        },
        "RetentionInDays": 30
      }
    }
  },

  "Outputs": {}
}
